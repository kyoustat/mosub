if (K>2){
k.true = c(k.true, sample(1:2, size=K-2, replace=TRUE))
}
k.true = sort(k.true, decreasing = F)
#J.true=2
#Generate the subspaces
Utrue.list = list()
for(k in 1:K){
Utrue.list[[k]] = rstiefel::rustiefel(m=m,R=k.true[k])
}
NU.true = list()
for(k in 1:K){
NU.true[[k]]=MASS::Null(Utrue.list[[k]])
}
PNU.list = list()
for(k in 1:K){
PNU.list[[k]] = NU.true[[k]]%*%t(NU.true[[k]])
}
#generate means in subspace coordinates
mutrue.list = list()
for(k in 1:K){
mutrue.list[[k]] = rnorm(k.true[k])
}
#generate the residual space noise level
phitrue.list = rep(10,K)
sigmatrue.list = rep(isotropic.var,K)
#generate the subspace variances
sigma0.true.list = list()
for(k in 1:K){
sigma0.true.list[[k]]=runif(k.true[k],isotropic.var,5.1)
}
Sigma0.true.list = list()
for(k in 1:K){
Sigma0.true.list[[k]]=diag(sigma0.true.list[[k]],k.true[k])
}
#generate the euclidean space coordinate mean vector theta
theta.true.list = list()
for(k in 1:K){
theta.true.list[[k]] = PNU.list[[k]]%*%rnorm(m)
}
X = matrix(0,nrow=n*k,ncol = m)
for(k in 1:K){
X[(n*(k-1)+1):(n*k),]=MASS::mvrnorm(n,mu=Utrue.list[[k]]%*%mutrue.list[[k]]+theta.true.list[[k]],
Sigma = sigmatrue.list[k]^2*diag(m)/10+Utrue.list[[k]]%*%(Sigma0.true.list[[k]]-sigmatrue.list[k]*diag(k.true[k]))%*%t(Utrue.list[[k]]))
}
scatterplot3d(x=X[,1], y=X[,2], z=X[,3], pch = 19)
K=3
m=3
n=50
isotropic.var=0.1
k.true= c(1:2)
if (K>2){
k.true = c(k.true, sample(1:2, size=K-2, replace=TRUE))
}
k.true = sort(k.true, decreasing = F)
#J.true=2
#Generate the subspaces
Utrue.list = list()
for(k in 1:K){
Utrue.list[[k]] = rstiefel::rustiefel(m=m,R=k.true[k])
}
NU.true = list()
for(k in 1:K){
NU.true[[k]]=MASS::Null(Utrue.list[[k]])
}
PNU.list = list()
for(k in 1:K){
PNU.list[[k]] = NU.true[[k]]%*%t(NU.true[[k]])
}
#generate means in subspace coordinates
mutrue.list = list()
for(k in 1:K){
mutrue.list[[k]] = rnorm(k.true[k])
}
#generate the residual space noise level
phitrue.list = rep(10,K)
sigmatrue.list = rep(isotropic.var,K)
#generate the subspace variances
sigma0.true.list = list()
for(k in 1:K){
sigma0.true.list[[k]]=runif(k.true[k],isotropic.var,5.1)
}
Sigma0.true.list = list()
for(k in 1:K){
Sigma0.true.list[[k]]=diag(sigma0.true.list[[k]],k.true[k])
}
#generate the euclidean space coordinate mean vector theta
theta.true.list = list()
for(k in 1:K){
theta.true.list[[k]] = PNU.list[[k]]%*%rnorm(m)
}
X = matrix(0,nrow=n*k,ncol = m)
for(k in 1:K){
X[(n*(k-1)+1):(n*k),]=MASS::mvrnorm(n,mu=Utrue.list[[k]]%*%mutrue.list[[k]]+theta.true.list[[k]],
Sigma = sigmatrue.list[k]^2*diag(m)/10+Utrue.list[[k]]%*%(Sigma0.true.list[[k]]-sigmatrue.list[k]*diag(k.true[k]))%*%t(Utrue.list[[k]]))
}
scatterplot3d(x=X[,1], y=X[,2], z=X[,3], pch = 19)
K=3
m=3
n=50
isotropic.var=0.1
k.true= c(1:2)
if (K>2){
k.true = c(k.true, sample(1:2, size=K-2, replace=TRUE))
}
k.true = sort(k.true, decreasing = F)
#J.true=2
#Generate the subspaces
Utrue.list = list()
for(k in 1:K){
Utrue.list[[k]] = rstiefel::rustiefel(m=m,R=k.true[k])
}
NU.true = list()
for(k in 1:K){
NU.true[[k]]=MASS::Null(Utrue.list[[k]])
}
PNU.list = list()
for(k in 1:K){
PNU.list[[k]] = NU.true[[k]]%*%t(NU.true[[k]])
}
#generate means in subspace coordinates
mutrue.list = list()
for(k in 1:K){
mutrue.list[[k]] = rnorm(k.true[k])
}
#generate the residual space noise level
phitrue.list = rep(10,K)
sigmatrue.list = rep(isotropic.var,K)
#generate the subspace variances
sigma0.true.list = list()
for(k in 1:K){
sigma0.true.list[[k]]=runif(k.true[k],isotropic.var,5.1)
}
Sigma0.true.list = list()
for(k in 1:K){
Sigma0.true.list[[k]]=diag(sigma0.true.list[[k]],k.true[k])
}
#generate the euclidean space coordinate mean vector theta
theta.true.list = list()
for(k in 1:K){
theta.true.list[[k]] = PNU.list[[k]]%*%rnorm(m)
}
X = matrix(0,nrow=n*k,ncol = m)
for(k in 1:K){
X[(n*(k-1)+1):(n*k),]=MASS::mvrnorm(n,mu=Utrue.list[[k]]%*%mutrue.list[[k]]+theta.true.list[[k]],
Sigma = sigmatrue.list[k]^2*diag(m)/10+Utrue.list[[k]]%*%(Sigma0.true.list[[k]]-sigmatrue.list[k]*diag(k.true[k]))%*%t(Utrue.list[[k]]))
}
scatterplot3d(x=X[,1], y=X[,2], z=X[,3], pch = 19)
K=3
m=3
n=50
isotropic.var=0.1
k.true= c(1:2)
if (K>2){
k.true = c(k.true, sample(1:2, size=K-2, replace=TRUE))
}
k.true = sort(k.true, decreasing = F)
#J.true=2
#Generate the subspaces
Utrue.list = list()
for(k in 1:K){
Utrue.list[[k]] = rstiefel::rustiefel(m=m,R=k.true[k])
}
NU.true = list()
for(k in 1:K){
NU.true[[k]]=MASS::Null(Utrue.list[[k]])
}
PNU.list = list()
for(k in 1:K){
PNU.list[[k]] = NU.true[[k]]%*%t(NU.true[[k]])
}
#generate means in subspace coordinates
mutrue.list = list()
for(k in 1:K){
mutrue.list[[k]] = rnorm(k.true[k])
}
#generate the residual space noise level
phitrue.list = rep(10,K)
sigmatrue.list = rep(isotropic.var,K)
#generate the subspace variances
sigma0.true.list = list()
for(k in 1:K){
sigma0.true.list[[k]]=runif(k.true[k],isotropic.var,5.1)
}
Sigma0.true.list = list()
for(k in 1:K){
Sigma0.true.list[[k]]=diag(sigma0.true.list[[k]],k.true[k])
}
#generate the euclidean space coordinate mean vector theta
theta.true.list = list()
for(k in 1:K){
theta.true.list[[k]] = PNU.list[[k]]%*%rnorm(m)
}
X = matrix(0,nrow=n*k,ncol = m)
for(k in 1:K){
X[(n*(k-1)+1):(n*k),]=MASS::mvrnorm(n,mu=Utrue.list[[k]]%*%mutrue.list[[k]]+theta.true.list[[k]],
Sigma = sigmatrue.list[k]^2*diag(m)/10+Utrue.list[[k]]%*%(Sigma0.true.list[[k]]-sigmatrue.list[k]*diag(k.true[k]))%*%t(Utrue.list[[k]]))
}
scatterplot3d(x=X[,1], y=X[,2], z=X[,3], pch = 19)
K=3
m=3
n=50
isotropic.var=0.1
k.true= c(1:2)
if (K>2){
k.true = c(k.true, sample(1:2, size=K-2, replace=TRUE))
}
k.true = sort(k.true, decreasing = F)
#J.true=2
#Generate the subspaces
Utrue.list = list()
for(k in 1:K){
Utrue.list[[k]] = rstiefel::rustiefel(m=m,R=k.true[k])
}
NU.true = list()
for(k in 1:K){
NU.true[[k]]=MASS::Null(Utrue.list[[k]])
}
PNU.list = list()
for(k in 1:K){
PNU.list[[k]] = NU.true[[k]]%*%t(NU.true[[k]])
}
#generate means in subspace coordinates
mutrue.list = list()
for(k in 1:K){
mutrue.list[[k]] = rnorm(k.true[k])
}
#generate the residual space noise level
phitrue.list = rep(10,K)
sigmatrue.list = rep(isotropic.var,K)
#generate the subspace variances
sigma0.true.list = list()
for(k in 1:K){
sigma0.true.list[[k]]=runif(k.true[k],isotropic.var,5.1)
}
Sigma0.true.list = list()
for(k in 1:K){
Sigma0.true.list[[k]]=diag(sigma0.true.list[[k]],k.true[k])
}
#generate the euclidean space coordinate mean vector theta
theta.true.list = list()
for(k in 1:K){
theta.true.list[[k]] = PNU.list[[k]]%*%rnorm(m)
}
X = c()
label = c()
for(k in 1:K){
X = rbind(X,MASS::mvrnorm(n,mu=Utrue.list[[k]]%*%mutrue.list[[k]]+theta.true.list[[k]],
Sigma = sigmatrue.list[k]^2*diag(m)/10+Utrue.list[[k]]%*%(Sigma0.true.list[[k]]-sigmatrue.list[k]*diag(k.true[k]))%*%t(Utrue.list[[k]])))
label = c(label, rep(k,n))
}
scatterplot3d(x=X[,1], y=X[,2], z=X[,3], pch = 19, color = label)
K=3
m=3
n=50
isotropic.var=0.1
k.true= c(1:2)
if (K>2){
k.true = c(k.true, sample(1:2, size=K-2, replace=TRUE))
}
k.true = sort(k.true, decreasing = F)
#J.true=2
#Generate the subspaces
Utrue.list = list()
for(k in 1:K){
Utrue.list[[k]] = rstiefel::rustiefel(m=m,R=k.true[k])
}
NU.true = list()
for(k in 1:K){
NU.true[[k]]=MASS::Null(Utrue.list[[k]])
}
PNU.list = list()
for(k in 1:K){
PNU.list[[k]] = NU.true[[k]]%*%t(NU.true[[k]])
}
#generate means in subspace coordinates
mutrue.list = list()
for(k in 1:K){
mutrue.list[[k]] = rnorm(k.true[k])
}
#generate the residual space noise level
phitrue.list = rep(10,K)
sigmatrue.list = rep(isotropic.var,K)
#generate the subspace variances
sigma0.true.list = list()
for(k in 1:K){
sigma0.true.list[[k]]=runif(k.true[k],isotropic.var,5.1)
}
Sigma0.true.list = list()
for(k in 1:K){
Sigma0.true.list[[k]]=diag(sigma0.true.list[[k]],k.true[k])
}
#generate the euclidean space coordinate mean vector theta
theta.true.list = list()
for(k in 1:K){
theta.true.list[[k]] = PNU.list[[k]]%*%rnorm(m)
}
X = c()
label = c()
for(k in 1:K){
X = rbind(X,MASS::mvrnorm(n,mu=Utrue.list[[k]]%*%mutrue.list[[k]]+theta.true.list[[k]],
Sigma = sigmatrue.list[k]^2*diag(m)/10+Utrue.list[[k]]%*%(Sigma0.true.list[[k]]-sigmatrue.list[k]*diag(k.true[k]))%*%t(Utrue.list[[k]])))
label = c(label, rep(k,n))
}
scatterplot3d(x=X[,1], y=X[,2], z=X[,3], pch = 19, color = label)
help("scatterplot3d")
set.seed(10)
tester = gen.LP(n=100, K=2, iso.var=0.1)
data   = tester$data
label  = tester$class
library(mosub)
set.seed(10)
tester = gen.LP(n=100, K=2, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## visualize
opar <- par(mfrow=c(2,2))
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=label,main="PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=label,main="Axis 1 vs 2")
plot(data[,1],data[,3],pch=19,cex=0.5,col=label,main="Axis 1 vs 3")
plot(data[,2],data[,3],pch=19,cex=0.5,col=label,main="Axis 2 vs 3")
par(opar)
scatterplot3d::scatterplot3d(x=data)
scatterplot3d::scatterplot3d(x=data, pch=19, cex=0.9, color=label)
scatterplot3d::scatterplot3d(x=data, pch=19, cex=0.9, color=label)
help("scatterplot3d")
scatterplot3d::scatterplot3d(x=data, pch=19, cex.symbols=0.9, color=label)
scatterplot3d::scatterplot3d(x=data, pch=19, cex.symbols=0.1, color=label)
scatterplot3d::scatterplot3d(x=data, pch=19, cex.symbols=0.5, color=label)
library(mosub)
## generate a toy example
set.seed(10)
tester = gen.LP(n=100, K=2, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with K=2, 3, and 4
maxiter = 5000
output2 = msm(data, K=2, iter=maxiter)
output3 = msm(data, K=3, iter=maxiter)
output4 = msm(data, K=4, iter=maxiter)
## extract final clustering information
finc2 = output2[[maxiter]]$cluster
finc3 = output3[[maxiter]]$cluster
finc4 = output4[[maxiter]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc2,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc2,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc2,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc2,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc3,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc3,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc3,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc3,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc4,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc4,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc4,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc4,main="K=4:Axis(2,3)")
par(opar)
seq(from=1,to=100,by=5)
X=list()
for (i in 1:10){X[[i]]=i}
X
X[c(1,3,8)]
library(mosub)
library(mosub)
maxiter = 5000
output2 = msm(data, K=2, iter=maxiter)
output3 = msm(data, K=3, iter=maxiter)
output4 = msm(data, K=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
nrec
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc2,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc2,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc2,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc2,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc3,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc3,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc3,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc3,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc4,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc4,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc4,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc4,main="K=4:Axis(2,3)")
par(opar)
finc2 = output2[[nrec]]$cluster+1
finc3 = output3[[nrec]]$cluster+1
finc4 = output4[[nrec]]$cluster+1
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc2,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc2,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc2,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc2,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc3,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc3,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc3,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc3,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc4,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc4,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc4,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc4,main="K=4:Axis(2,3)")
par(opar)
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.5,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.5,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.5,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.5,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
plot(dat2[,1],dat2[,2],pch=19,cex=0.25,col=finc2+1,main="K=2:PCA")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
## generate a toy example
set.seed(10)
tester = gen.LP(n=100, K=2, iso.var=0.1)
data   = tester$data
label  = tester$class
## do PCA for data reduction
proj = base::eigen(stats::cov(data))$vectors[,1:2]
dat2 = data%*%proj
## run MSM algorithm with K=2, 3, and 4
maxiter = 100000
output2 = msm(data, K=2, iter=maxiter)
output3 = msm(data, K=3, iter=maxiter)
output4 = msm(data, K=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
maxiter = 1000
output2 = msm(data, K=2, iter=maxiter)
output3 = msm(data, K=3, iter=maxiter)
output4 = msm(data, K=4, iter=maxiter)
## extract final clustering information
nrec  = length(output2)
finc2 = output2[[nrec]]$cluster
finc3 = output3[[nrec]]$cluster
finc4 = output4[[nrec]]$cluster
## visualize
opar <- par(mfrow=c(3,4))
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc2+1,main="K=2:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc3+1,main="K=3:Axis(2,3)")
plot(dat2[,1],dat2[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:PCA")
plot(data[,1],data[,2],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,2)")
plot(data[,1],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(1,3)")
plot(data[,2],data[,3],pch=19,cex=0.3,col=finc4+1,main="K=4:Axis(2,3)")
par(opar)
library(mosub)
